<?php

use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_webform_element_alter().
 *
 * @param array $element
 * @param FormStateInterface $form_state
 * @param array $context
 */
function ldbase_handlers_webform_element_alter(array &$element, FormStateInterface $form_state, array $context) {
  if (isset($element['#webform_id'])) {
    // change validation for these fields to Person auto-created stub records
    $author_webform_ids = array(
      'create_update_dataset--contributors',
      'create_update_document--authors',
      'create_update_codebook--authors',
      'create_update_project--related_persons',
      'create_update_code--authors'
    );
    // change validation for these fields to Organization auto-created stub records
    $organization_webform_ids = array(
      'create_update_project--related_organizations',
      'create_update_dataset--host_organizations',
      'create_update_person--related_organizations'
    );
    $modify_validations = array_merge($author_webform_ids, $organization_webform_ids);

    if (in_array($element['#webform_id'], $modify_validations)) {
      $use_validation = array(
        'Drupal\Core\Entity\Element\EntityAutocomplete',
        'validateEntityAutocomplete',
      );
      // clear validation and add core validation back
      $element['#element']['#element_validate'] = array();
      array_push($element['#element']['#element_validate'], $use_validation);
    }

    // Select2 validation - remove default validation so we can add taxonomy terms
    $select2_fields = array(
      'create_update_project--project_type',
      'create_update_project--schooling',
      'create_update_project--curricula',
      'create_update_project--time_method',
      'create_update_dataset--constructs',
      'create_update_dataset--data_collection_locations',
      'create_update_dataset--assessment_name',
      'create_update_dataset--special_populations',
      'create_update_dataset--variable_types_in_dataset'
    );

    if (in_array($element['#webform_id'], $select2_fields)) {
      $use_validation = array('validateMultipleOptions');
      unset($element['#element_validate'][0]);
      array_push($element['#element_validate'], $use_validation);
      $element['#validated']  = TRUE;
    }
  }
}

/**
 * Implements HOOK_webform_submission_form_alter().
 * Sets visibility trigger pattern to $tid for "Other"
 */
function ldbase_handlers_webform_submission_form_alter(array &$form, FormStateInterface $form_state, $form_id) {

  $changes = getOtherTermsInfo();  // gets webform, field, term, and vocabulary data
  foreach ($changes as $webform_id => $changes) {
    if ($form['#webform_id'] === $webform_id) {
      foreach ($changes as $change) {
        $tid = getTermId($change['term'], $change['vocabulary']);
        foreach ($form['elements'][$change['field']]['#states']['visible'] as $key => $value) {
          // $key is a generated id that includes webform name and node id, foreach gets past this
          $form['elements'][$change['field']]['#states']['visible'][$key]['value']['pattern'] = "\b{$tid}\b";
        }
      }
    }
  }
}

function getOtherTermsInfo() {
  // webform_id, field, term, vocabulary
  $other_terms = array(
    "create_update_project" => [
      ["field" => "project_type_other", "term" => "Other", "vocabulary" => "project_types"],
      ["field" => "schooling_other", "term" => "Other", "vocabulary" => "schooling"],
      ["field" => "curricula_other", "term" => "Other", "vocabulary" => "curricula"],
      ["field" => "time_method_other", "term" => "Other", "vocabulary" => "time_methods"],
    ],
    "create_update_dataset" => [
      ["field" => "constructs_other", "term" => "Other", "vocabulary" => "constructs"],
      ["field" => "data_collection_locations_other", "term" => "Other", "vocabulary" => "data_collection_locations"],
      ["field" => "assessment_names_other", "term" => "Other", "vocabulary" => "assessments"],
      ["field" => "special_populations_other", "term" => "Other", "vocabulary" => "special_populations"],
      ["field" => "variable_types_other", "term" => "Other", "vocabulary" => "dataset_variables"],
    ],
  );

  return $other_terms;
}

function getTermId($name, $vocabulary) {
  if (empty($name) || empty($vocabulary)) {
    return NULL;
  }
  else {
    $term = \Drupal::entityTypeManager()
    ->getStorage('taxonomy_term')
    ->loadByProperties(['name' => $name, 'vid' => $vocabulary]);
    $term = reset($term);
    return $term->id();
  }
}

/**
 * Implements hook_webform_options_WEBFORM_OPTIONS_ID_alter()
 * Creates year options
 *
 * @param array $options
 * @param array $element
 */
function ldbase_handlers_webform_options_years_alter(array &$options, array &$element) {
  // load cached options if avaliable
  if ($cache = \Drupal::cache()->get('years')) {
    $options = $cache->data;
    return;
  }

  $this_year = date("Y");
  for ($x = $this_year + 2; $x >= $this_year - 50; $x--) {
    $options[$x] = $x;
  }
  // cache options
  \Drupal::cache()->set('years', $options);
}

/**
 * Implements HOOK_widget_form_alter()
 *
 */
function ldbase_handlers_webform_element_managed_file_alter(&$element, &$form_state, $context) {
  if ($element['#webform'] === 'create_update_dataset') {
    if (isset($element['remove_button']['#value'])) {
      $element['remove_button']['#value'] = t('Upload New Version');
    }
    if (!empty($element['#type']) && $element['#type'] == 'managed_file') {
      $element['#process'][] = 'custom_remove_button_label';
    }
  }
}

function custom_remove_button_label($element, FormStateInterface $form_state, $form) {
  if (isset($element['remove_button']['#value'])) {
    $element['remove_button']['#value'] = t('Upload New Version');
  }
  return $element;
}

/**
 * Implements hook_menu_local_tasks_alter().
 * Removes local tasks from Group user management and User account page
 */

function ldbase_handlers_menu_local_tasks_alter(&$data, $route_name, &$cacheability) {
  // remove local tasks from edit and delete group member forms
  if ($route_name === 'entity.group_content.edit_form' ||
    $route_name === 'entity.group_content.delete_form'
    ) {
    unset($data['tabs'][0]);
  }
  // if this is the user account page
  if ($route_name === 'entity.user.canonical') {
    unset($data['tabs'][0]);
  }
}

/**
 * Implements hook_preprocess_page_title.
 * Includes Project name on Add Member page rather than group content type
 */
function ldbase_handlers_preprocess_page_title(&$variables) {
  if (\Drupal::routeMatch()->getRouteName() == 'entity.group_content.add_form') {
    $destination_query = \Drupal::request()->query->get('destination');
    if (!empty($destination_query) &&
    $ldbase_object_uuid = \Drupal::service('ldbase.object_service')->isUrlAnLdbaseObjectUrl($destination_query)
    ) {
      $ldbase_object = \Drupal::service('ldbase.object_service')->getLdbaseObjectFromUuid($ldbase_object_uuid);
      $variables['title'] = t('Add Project: @title member', ['@title' => $ldbase_object->getTitle()]);
    }
  }
}

/**
 * Implements hook_form_alter().
 * On Project membership forms, changes 'delete' to 'remove'
 */
function ldbase_handlers_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'group_content_project_group-group_membership_delete_form') {
    $form['#title'] = t('Are you sure you want to remove %name from the project?', ['%name' => $form['#title']->getArguments()['%name']]);
    $form['actions']['submit']['#value'] = t("Remove");
  }
  elseif ($form_id == 'group_content_project_group-group_membership_edit_form') {
    $form['actions']['delete']['#title'] = t("Remove");
  }
}

/**
 * Implements HOOK_preprocess_menu__MENU_NAME().
 * Changes Document edit and delete tasks to identify Codebooks (type of document)
 */
function ldbase_handlers_preprocess_menu__document_tasks(&$variables) {
  $uuid = \Drupal::RouteMatch()->getParameter('node')->uuid();
  $doc_type = \Drupal::service('ldbase.object_service')->isLdbaseCodebook($uuid) ? 'Codebook' : 'Document';
  $variables['items']['ldbase_handlers.edit_document']['title'] = "Edit this {$doc_type}";
  $variables['items']['ldbase_handlers.confirm_document_deletion']['title'] = "Delete this {$doc_type} ...";
}
