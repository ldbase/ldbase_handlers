<?php

use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_webform_element_alter().
 *
 * @param array $element
 * @param FormStateInterface $form_state
 * @param array $context
 */
function ldbase_handlers_webform_element_alter(array &$element, FormStateInterface $form_state, array $context) {
  if (isset($element['#webform_id'])) {
    // change validation for these fields to Person auto-created stub records
    $author_webform_ids = array(
      'create_update_dataset--contributors',
      'create_update_document--authors',
      'create_update_codebook--authors',
      'create_update_project--related_persons',
      'create_update_code--authors'
    );
    // change validation for these fields to Organization auto-created stub records
    $organization_webform_ids = array(
      'create_update_project--related_organizations',
      'create_update_dataset--host_organizations',
      'create_update_person--related_organizations'
    );
    $modify_validations = array_merge($author_webform_ids, $organization_webform_ids);

    if (in_array($element['#webform_id'], $modify_validations)) {
      $use_validation = array(
        'Drupal\Core\Entity\Element\EntityAutocomplete',
        'validateEntityAutocomplete',
      );
      // clear validation and add core validation back
      $element['#element']['#element_validate'] = array();
      array_push($element['#element']['#element_validate'], $use_validation);
    }
  }
}

/**
 * Implements hook_webform_options_WEBFORM_OPTIONS_ID_alter()
 * Creates year options
 *
 * @param array $options
 * @param array $element
 */
function ldbase_handlers_webform_options_years_alter(array &$options, array &$element) {
  // load cached options if avaliable
  if ($cache = \Drupal::cache()->get('years')) {
    $options = $cache->data;
    return;
  }

  $this_year = date("Y");
  for ($x = $this_year + 2; $x >= $this_year - 50; $x--) {
    $options[$x] = $x;
  }
  // cache options
  \Drupal::cache()->set('years', $options);
}

/**
 * Implements HOOK_widget_form_alter()
 *
 */
function ldbase_handlers_webform_element_managed_file_alter(&$element, &$form_state, $context) {
  if ($element['#webform'] === 'create_update_dataset') {
    if (isset($element['remove_button']['#value'])) {
      $element['remove_button']['#value'] = t('Upload New Version');
    }
    if (!empty($element['#type']) && $element['#type'] == 'managed_file') {
      $element['#process'][] = 'custom_remove_button_label';
    }
  }
}

function custom_remove_button_label($element, FormStateInterface $form_state, $form) {
  if (isset($element['remove_button']['#value'])) {
    $element['remove_button']['#value'] = t('Upload New Version');
  }
  return $element;
}
